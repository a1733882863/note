服务器包含两层防火墙: linux自带的和阿里云的安全组

自带的使用firewall-cmd来操作
----------------------------------------------------
#查看防火墙状态
firewall-cmd --state
#开启防火墙
systemctl start firewalld.service
#开机自启
systemctl enable firewalld.service
#查询端口
firewall-cmd --list-all
#添加端口
firewall-cmd --permanent --add-port=8080/tcp
#删除端口
firewall-cmd --permanent --remove-port=8080/tcp
#重新加载防火墙
firewall-cmd --reload
-----------------------------------------------
阿里云的安全组自己配置 端口与来源 0.0.0.0 表示任意

一般使用centos, 安装软件用rpm和yum 
yum基于rpm的工具   
常用命令: yum install 包名    yum -y remove 包名


安装上传文件到服务器的软件:
yum install -y lrzsz

安装docker环境: 
#yum 包更新到最新
sudo yum -y update

#安装需要的软件包， yum-util提供yum-config-manager功能，另外两个是devicemapper驱动依赖的
sudo yum install -y yum-utils device-mapper-persistent-data lvm2

#设置yum源为阿里云
sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo

#安装Docker
sudo yum install -y docker-ce

#安装后查看Docker的版本
docker -v


#设置ustc的镜像
#ustc是老牌的linux镜像服务提供者，ustc的docker的镜像加速服务器速度很快。并且不需要注册时真正的公共服务。

#创建文件夹
mkdir /etc/docker/

#编辑文件
vi /etc/docker/daemon.json

#在该文件中输入一下内容
{
	"registry-mirrors":["https://docker.mirrors.ustc.edu.cn"]
}

#常用命令
#启动docker
systemctl start docker 

#停止docker
systemctl stop docker 

#重启docker
systemctl restart docker 

#查看docker的状态
systemctl status docker 

#开机启动docker
systemctl enable docker 

#查看docker的概要信息
docker info

# 查看docker安装位置
sudo docker info | grep "Docker Root Dir"

#查看docker的帮助文档
docker --help

安装java环境:
1. 创建文件夹： mkdir /usr/local/java/
2. 解压： tar -zxvf jdk-8u281-linux-x64.tar.gz -C /usr/local/java/
3. 修改配置文件： vim /etc/profile
--------------------------------------------------
# java environment
export JAVA_HOME=/usr/local/java/jdk1.8.0_281
export JRE_HOME=$JAVA_HOME/jre
export CLASSPATH=$JAVA_HOME/lib:$JRE_HOME/lib:$CLASSPATH
export PATH=$JAVA_HOME/bin:$JRE_HOME/bin:$PATH
--------------------------------------------------------
4. 使环境变量生效：source /etc/profile
5. 查看是否安装完成： java -version


安装maven:
1. 创建文件夹
mkdir /usr/local/maven/
mkidr /var/repository
2. 解压
wget http://mirrors.hust.edu.cn/apache/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.tar.gz
tar -zxvf  apache-maven-3.6.3-bin.tar.gz -C /usr/local/maven/
修改maven本地仓库地址和国内镜像源
vim /usr/local/maven/apache-maven-3.6.3/conf/settings.xml
---------------------------------------------------------------------
<localRepository>/var/repository</localRepository>

<mirror>
                <id>alimaven</id>
                <name>aliyun maven</name>
                <url>http://maven.aliyun.com/nexus/content/groups/public/</url>
                <mirrorOf>central</mirrorOf>
</mirror>
---------------------------------------------------------------------
3. 修改配置文件 vi /etc/profile
--------------------------------------------------------------------
#maven environment
export MAVEN_HOME=/usr/local/maven/apache-maven-3.6.3   (解压后不会带上bin这个后缀)
export PATH=$MAVEN_HOME/bin:$PATH
-----------------------------------------------------------------------
4. 使环境变量生效：source /etc/profile
5. 查看是否安装完成：mvn -version


安装git:
# 安装
yum install -y git
# 查看版本
git version


git命令基本使用:
#创建本地版本库
git init
#提交本地修改
git commit -m "备注"
#设置远端
git remote add origin url
#推送分支到远端
git push origin master

安装node:
#下载安装包, 主流版本是12.16.1
wget https://npm.taobao.org/mirrors/node/v12.16.1/node-v12.16.1-linux-x64.tar.gz
#解压
tar -xvf node-v12.16.1-linux-x64.tar.gz
#将node放在指定目录方便管理
sudo mv ./node-v12.14.1-linux-x64 /usr/local/node
#创建快捷方式
sudo ln -s /usr/local/node/bin/node /usr/bin/node
sudo ln -s /usr/local/node/bin/npm /usr/bin/npm
#也可以在/etc/profile中设置环境变量
#测试是否安装成功
node -v 
npm -v
#看情况是否更改npm下载源
npm config set registry https://registry.npm.taobao.org


================== docker 安装完之后 ====================== 

安装mysql:  (实测5.7比8.0流畅一些)
docker run -p 3306:3306 --name mysql --privileged=true --restart=unless-stopped  -v /etc/mysql:/etc/mysql -v /var/lib/mysql:/var/lib/mysql -v /etc/localtime:/etc/localtime -e MYSQL_ROOT_PASSWORD=root -d mysql:5.7 

安装jenkins:
#创建文件夹
mkdir /var/jenkins_home
#使用oceanblue版本 好像比较快
docker pull jenkinsci/blueocean:latest

#运行容器
docker run -d --privileged=true --restart=unless-stopped -u root -p 8080:8080 -p 50000:50000 -v /var/jenkins_home:/var/jenkins_home -v /var/repository:/var/repository  -v /var/run/docker.sock:/var/run/docker.sock -v  /usr/local/maven:/usr/local/maven -v  /usr/local/java:/usr/local/java -v  /usr/local/node:/usr/local/node    -v /etc/localtime:/etc/localtime --name jenkins jenkinsci/blueocean:latest


安装nginx:

安装tomcat:
mkdir /var/tomcat
docker run -d --name tomcat -p 80:8080 -v /var/test:/usr/local/tomcat/webapps/test tomcat

安装redis:
docker run -d --name redis -p 6379:6379 redis --requirepass 123456

jenkins部署前端: 
拉取代码 -> 执行npm install 与 npm run build -> 执行脚本 -> 根据dockerfile使用dist文件夹和nginx镜像, 构建前端项目镜像 -> 容器停止,镜像删除 -> 启动容器

jenkins部署后端:
拉取代码 -> 执行maven命令: clean package, 会同时构建后端项目镜像 -> 执行脚本 -> 容器停止,镜像删除 -> 启动容器


前端脚本参考: 
---------------------------------
#!/bin/bash
path="/var/jenkins_home/jobs/elementui/workspace"
app_name="elementui"
author="linyi"
#切换工作目录, 方能执行dockerfile
cd ${path}
# 删除原容器
docker rm -f ${app_name}
# 删除原镜像
docker rmi ${author}/${app_name} &> /dev/null
echo  "删除原容器和原镜像成功"
# 构建镜像
docker build -t ${author}/${app_name} .
echo "新镜像构建成功"
# 启动容器
docker run -p 3000:80 -d --name ${app_name} ${author}/${app_name}:latest
echo "前端工程部署完毕"
-----------------------------------------

前端dockerfile:
---------------------------------------
# 设置基础镜像
FROM nginx
# 定义作者
MAINTAINER linyi
# 将dist文件中的内容复制到 /usr/share/nginx/html/ 这个目录下面
COPY dist/  /usr/share/nginx/html/
-------------------------------------------

后端pom文件(主要是build标签):
-------------------------------------------------
<build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.1</version>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                    <encoding>UTF-8</encoding>
                </configuration>
            </plugin>
            <!--    打包配置, 可以使用java -jar        -->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <mainClass>com.example.springboottest.SpringboottestApplication</mainClass>
                </configuration>
                <executions>
                    <execution>
                        <id>repackage</id>
                        <goals>
                            <goal>repackage</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <!--使用docker-maven-plugin插件-->
            <plugin>
                <groupId>com.spotify</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>1.1.0</version>
                <!--将插件绑定在某个phase执行-->
                <executions>
                    <execution>
                        <id>build-image</id>
                        <!--用户只需执行mvn package ，就会自动执行mvn docker:build-->
                        <phase>package</phase>
                        <goals>
                            <goal>build</goal>
                        </goals>
                    </execution>
                </executions>

                <configuration>
                    <!--指定远程 docker api地址-->
                    <!--                    <dockerHost>http://localhost:2375</dockerHost>-->
                    <!--指定生成的镜像名,这里是我们的作者名+项目名-->
                    <imageName>linyi/${project.artifactId}</imageName>

                    <!--指定标签 这里指定的是镜像的版本，我们默认版本是latest-->
                    <imageTags>
                        <imageTag>latest</imageTag>
                    </imageTags>

                    <!--指定基础镜像jdk1.8-->
                    <baseImage>java</baseImage>
                    <!--
                    镜像制作人本人信息
                    <maintainer>bruceliu@email.com</maintainer>
                    -->
                    <!--切换到ROOT目录-->
                    <workdir>/ROOT</workdir>

                    <!--查看我们的java版本-->
                    <cmd>["java", "-version"]</cmd>

                    <!--${project.build.finalName}.jar是打包后生成的jar包的名字-->
                    <entryPoint>["java", "-jar", "/${project.build.finalName}.jar"]</entryPoint>


                    <!-- 这里是复制 jar 包到 docker 容器指定目录配置 -->
                    <resources>
                        <resource>
                            <targetPath>/</targetPath>
                            <!--jar 包所在的路径  此处配置的 即对应 target 目录-->
                            <directory>${project.build.directory}</directory>
                            <!--用于指定需要复制的文件 需要包含的 jar包 ，这里对应的是 Dockerfile中添加的文件名　-->
                            <include>${project.build.finalName}.jar</include>
                        </resource>
                    </resources>

                </configuration>
            </plugin>
        </plugins>
    </build>
-----------------------------------------------

后端脚本(jenkins中调用docker命令已经构建好镜像):
----------------------------------------------------
#!/bin/bash
app_name='springboottest'
author='linyi'
# 停止原先的容器
docker stop ${app_name}
# 删除原先的容器
docker rm -f ${app_name}
# 批量删除已经退出的容器(这个看情况, 不一定要执行)
#docker ps -a | grep "Exited" | awk '{print $1 }' | xargs docker rm
# 批量删除带有none字段的镜像(被新构建的镜像覆盖的旧镜像, 占用内存)
docker images| grep none |awk '{print $3 }' | xargs docker rmi
# 启动新的容器
docker run -p 9002:9002 -d --name ${app_name} --restart=unless-stopped ${author}/${app_name}:latest
-----------------------------------------------------

#实际企业开发中会搭建harbor镜像仓库, 并在pom文件中指定push到哪个远程仓库, 脚本中会从仓库中下载新推送的镜像
app_name='xxx'
harbor_registry='reg.xxx.com'
image_prefix='cmp'
maven_version='test-1.0.2-SNAPSHOT'
docker stop ${app_name}
docker rm -f ${app_name}
docker rmi ${harbor_registry}/${image_prefix}/${app_name}:${maven_version}
docker login --username=xxx --password=xxx https://${harbor_registry}
docker run -p 8080:8080 -d -v /data/ecidi:/data/ecidi --name ${app_name} --restart=unless-stopped ${harbor_registry}/${image_prefix}/${app_name}:${maven_version}






